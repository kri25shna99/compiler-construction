
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\007\000\002\002\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\004\000\002\004\002" +
    "\000\002\005\004\000\002\005\002\000\002\007\004\000" +
    "\002\007\002\000\002\006\007\000\002\006\006\000\002" +
    "\006\010\000\002\011\004\000\002\011\002\000\002\010" +
    "\014\000\002\010\014\000\002\012\003\000\002\012\002" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\015\003\000\002\015\002\000\002" +
    "\014\005\000\002\014\003\000\002\016\004\000\002\016" +
    "\006\000\002\017\004\000\002\017\002\000\002\020\003" +
    "\000\002\020\007\000\002\020\006\000\002\020\007\000" +
    "\002\020\007\000\002\020\007\000\002\020\006\000\002" +
    "\020\007\000\002\020\004\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\007\000\002\021\010" +
    "\000\002\022\004\000\002\022\002\000\002\024\003\000" +
    "\002\024\006\000\002\023\005\000\002\023\003\000\002" +
    "\025\005\000\002\025\003\000\002\026\005\000\002\026" +
    "\003\000\002\027\003\000\002\027\002\000\002\030\003" +
    "\000\002\030\005\000\002\030\006\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\005\000\002\030" +
    "\004\000\002\030\004\000\002\030\004\000\002\030\006" +
    "\000\002\030\003\000\002\030\011\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\004\004\005\001\002\000\004\002\300\001" +
    "\002\000\004\057\006\001\002\000\004\027\007\001\002" +
    "\000\020\005\015\006\020\010\010\011\022\013\013\014" +
    "\021\030\ufffc\001\002\000\006\026\uffee\057\uffee\001\002" +
    "\000\016\005\015\010\010\011\022\013\013\014\021\030" +
    "\ufff8\001\002\000\004\030\272\001\002\000\006\026\uffec" +
    "\057\uffec\001\002\000\020\005\015\006\020\010\010\011" +
    "\022\013\013\014\021\030\ufffc\001\002\000\004\057\260" +
    "\001\002\000\004\030\uffff\001\002\000\004\057\125\001" +
    "\002\000\012\010\010\011\022\013\013\014\021\001\002" +
    "\000\006\026\uffed\057\uffed\001\002\000\006\026\uffeb\057" +
    "\uffeb\001\002\000\004\057\024\001\002\000\006\033\ufff3" +
    "\046\025\001\002\000\030\023\032\024\035\025\036\037" +
    "\040\044\033\045\030\057\037\060\045\061\042\062\034" +
    "\063\041\001\002\000\004\033\027\001\002\000\040\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7\027\ufff7\030" +
    "\ufff7\057\ufff7\001\002\000\030\023\032\024\035\025\036" +
    "\037\040\044\033\045\030\057\037\060\045\061\042\062" +
    "\034\063\041\001\002\000\046\026\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8" +
    "\055\uffc8\056\uffc8\001\002\000\046\026\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\042\uffc1\043\uffc1\044\uffc1" +
    "\045\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\001\002\000\030\023\032\024\035" +
    "\025\036\037\040\044\033\045\030\057\037\060\045\061" +
    "\042\062\034\063\041\001\002\000\046\026\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\056\uffc4\001\002\000\046\026\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\055\uffc0\056\uffc0\001\002\000\040\010\010" +
    "\011\022\013\013\014\021\023\032\024\035\025\036\037" +
    "\040\044\033\045\030\057\037\060\045\061\042\062\034" +
    "\063\041\001\002\000\052\025\100\026\uffd2\031\077\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\001\002\000\030\023\032" +
    "\024\035\025\036\037\040\044\033\045\030\057\037\060" +
    "\045\061\042\062\034\063\041\001\002\000\046\026\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\001\002\000\046\026" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\001\002\000\034" +
    "\033\ufff4\042\050\043\056\044\052\045\047\047\057\050" +
    "\053\051\055\052\054\053\051\054\061\055\060\056\046" +
    "\001\002\000\046\026\uffba\032\uffba\033\uffba\034\uffba\035" +
    "\uffba\036\uffba\042\uffba\043\uffba\044\uffba\045\uffba\047\uffba" +
    "\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056" +
    "\uffba\001\002\000\046\026\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\001\002\000\030\023\032\024\035\025\036\037" +
    "\040\044\033\045\030\057\037\060\045\061\042\062\034" +
    "\063\041\001\002\000\030\023\032\024\035\025\036\037" +
    "\040\044\033\045\030\057\037\060\045\061\042\062\034" +
    "\063\041\001\002\000\030\023\032\024\035\025\036\037" +
    "\040\044\033\045\030\057\037\060\045\061\042\062\034" +
    "\063\041\001\002\000\030\023\032\024\035\025\036\037" +
    "\040\044\033\045\030\057\037\060\045\061\042\062\034" +
    "\063\041\001\002\000\030\023\032\024\035\025\036\037" +
    "\040\044\033\045\030\057\037\060\045\061\042\062\034" +
    "\063\041\001\002\000\030\023\032\024\035\025\036\037" +
    "\040\044\033\045\030\057\037\060\045\061\042\062\034" +
    "\063\041\001\002\000\030\023\032\024\035\025\036\037" +
    "\040\044\033\045\030\057\037\060\045\061\042\062\034" +
    "\063\041\001\002\000\030\023\032\024\035\025\036\037" +
    "\040\044\033\045\030\057\037\060\045\061\042\062\034" +
    "\063\041\001\002\000\030\023\032\024\035\025\036\037" +
    "\040\044\033\045\030\057\037\060\045\061\042\062\034" +
    "\063\041\001\002\000\030\023\032\024\035\025\036\037" +
    "\040\044\033\045\030\057\037\060\045\061\042\062\034" +
    "\063\041\001\002\000\030\023\032\024\035\025\036\037" +
    "\040\044\033\045\030\057\037\060\045\061\042\062\034" +
    "\063\041\001\002\000\030\023\032\024\035\025\036\037" +
    "\040\044\033\045\030\057\037\060\045\061\042\062\034" +
    "\063\041\001\002\000\046\026\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\042\050\043\056\044\052\045\047" +
    "\047\057\050\053\051\uffaf\052\054\053\051\054\uffaf\055" +
    "\uffaf\056\uffaf\001\002\000\046\026\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\042\050\043\056\044\052\045" +
    "\047\047\057\050\053\051\055\052\054\053\051\054\061" +
    "\055\uffae\056\046\001\002\000\046\026\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\042\050\043\056\044\052" +
    "\045\047\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\001\002\000\046\026\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\036\uffb7\042\uffb7\043\uffb7\044" +
    "\052\045\047\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\001\002\000\046\026\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\042\050\043\056" +
    "\044\052\045\047\047\057\050\053\051\uffb0\052\054\053" +
    "\051\054\uffb0\055\uffb0\056\uffb0\001\002\000\046\026\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\042\050\043" +
    "\056\044\052\045\047\047\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\055\uffb2\056\uffb2\001\002\000\046\026" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\042\050" +
    "\043\056\044\052\045\047\047\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\001\002\000\046" +
    "\026\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\001\002\000" +
    "\046\026\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\042\050\043\056\044\052\045\047\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\001\002" +
    "\000\046\026\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\042\uffb8\043\uffb8\044\052\045\047\047\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\001" +
    "\002\000\046\026\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\047\uffb5\050" +
    "\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5" +
    "\001\002\000\046\026\uffad\032\uffad\033\uffad\034\uffad\035" +
    "\uffad\036\uffad\042\050\043\056\044\052\045\047\047\057" +
    "\050\053\051\055\052\054\053\051\054\061\055\uffad\056" +
    "\uffad\001\002\000\046\026\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe" +
    "\056\uffbe\001\002\000\030\023\032\024\035\025\036\037" +
    "\040\044\033\045\030\057\037\060\045\061\042\062\034" +
    "\063\041\001\002\000\032\023\032\024\035\025\036\026" +
    "\101\037\040\044\033\045\030\057\037\060\045\061\042" +
    "\062\034\063\041\001\002\000\046\026\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\056\uffc7\001\002\000\004\026\106\001\002" +
    "\000\036\026\uffcf\034\104\042\050\043\056\044\052\045" +
    "\047\047\057\050\053\051\055\052\054\053\051\054\061" +
    "\055\060\056\046\001\002\000\030\023\032\024\035\025" +
    "\036\037\040\044\033\045\030\057\037\060\045\061\042" +
    "\062\034\063\041\001\002\000\004\026\uffd0\001\002\000" +
    "\046\026\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\001\002" +
    "\000\034\032\110\042\050\043\056\044\052\045\047\047" +
    "\057\050\053\051\055\052\054\053\051\054\061\055\060" +
    "\056\046\001\002\000\054\026\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1" +
    "\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\001\002\000\036" +
    "\026\115\035\116\042\050\043\056\044\052\045\047\047" +
    "\057\050\053\051\055\052\054\053\051\054\061\055\060" +
    "\056\046\001\002\000\004\026\113\001\002\000\030\023" +
    "\032\024\035\025\036\037\040\044\033\045\030\057\037" +
    "\060\045\061\042\062\034\063\041\001\002\000\046\026" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\042\050" +
    "\043\056\044\052\045\047\047\057\050\053\051\055\052" +
    "\054\053\051\054\061\055\060\056\046\001\002\000\046" +
    "\026\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\001\002\000" +
    "\030\023\032\024\035\025\036\037\040\044\033\045\030" +
    "\057\037\060\045\061\042\062\034\063\041\001\002\000" +
    "\034\036\120\042\050\043\056\044\052\045\047\047\057" +
    "\050\053\051\055\052\054\053\051\054\061\055\060\056" +
    "\046\001\002\000\030\023\032\024\035\025\036\037\040" +
    "\044\033\045\030\057\037\060\045\061\042\062\034\063" +
    "\041\001\002\000\034\026\122\042\050\043\056\044\052" +
    "\045\047\047\057\050\053\051\055\052\054\053\051\054" +
    "\061\055\060\056\046\001\002\000\046\026\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\001\002\000\046\026\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\056\uffbc\001\002\000\046\026\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\056\uffbd\001\002\000\012\025" +
    "\127\031\126\033\ufff3\046\025\001\002\000\004\060\255" +
    "\001\002\000\014\010\010\011\022\013\013\014\021\026" +
    "\uffe9\001\002\000\004\033\131\001\002\000\040\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\022\ufff6\027\ufff6\030\ufff6" +
    "\057\ufff6\001\002\000\006\026\uffe7\034\253\001\002\000" +
    "\004\057\250\001\002\000\004\026\uffea\001\002\000\004" +
    "\026\136\001\002\000\004\027\137\001\002\000\036\006" +
    "\020\007\ufffa\010\010\011\022\013\013\014\021\015\ufffa" +
    "\016\ufffa\017\ufffa\020\ufffa\022\ufffa\027\ufffa\030\ufffa\057" +
    "\ufffa\001\002\000\036\006\020\007\ufffa\010\010\011\022" +
    "\013\013\014\021\015\ufffa\016\ufffa\017\ufffa\020\ufffa\022" +
    "\ufffa\027\ufffa\030\ufffa\057\ufffa\001\002\000\004\057\246" +
    "\001\002\000\024\007\153\015\143\016\152\017\156\020" +
    "\150\022\144\027\155\030\uffe3\057\151\001\002\000\004" +
    "\025\236\001\002\000\004\025\232\001\002\000\004\030" +
    "\230\001\002\000\010\040\223\041\222\046\221\001\002" +
    "\000\024\007\153\015\143\016\152\017\156\020\150\022" +
    "\144\027\155\030\uffe3\057\151\001\002\000\004\025\211" +
    "\001\002\000\014\025\203\031\077\040\uffd2\041\uffd2\046" +
    "\uffd2\001\002\000\004\025\177\001\002\000\032\023\032" +
    "\024\035\025\036\033\174\037\040\044\033\045\030\057" +
    "\037\060\045\061\042\062\034\063\041\001\002\000\026" +
    "\007\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\027\uffe2\030\uffe2\057\uffe2\001\002\000\036\006\020" +
    "\007\ufffa\010\010\011\022\013\013\014\021\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\022\ufffa\027\ufffa\030\ufffa\057\ufffa" +
    "\001\002\000\004\025\157\001\002\000\032\023\032\024" +
    "\035\025\036\026\uffc9\037\040\044\033\045\030\057\037" +
    "\060\045\061\042\062\034\063\041\001\002\000\004\026" +
    "\uffca\001\002\000\004\026\165\001\002\000\036\026\uffcb" +
    "\034\163\042\050\043\056\044\052\045\047\047\057\050" +
    "\053\051\055\052\054\053\051\054\061\055\060\056\046" +
    "\001\002\000\030\023\032\024\035\025\036\037\040\044" +
    "\033\045\030\057\037\060\045\061\042\062\034\063\041" +
    "\001\002\000\004\026\uffcc\001\002\000\004\033\166\001" +
    "\002\000\026\007\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\027\uffdd\030\uffdd\057\uffdd\001\002\000" +
    "\024\007\153\015\143\016\152\017\156\020\150\022\144" +
    "\027\155\030\uffe3\057\151\001\002\000\004\030\171\001" +
    "\002\000\030\007\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\027\uffef\030\uffef\033\172\057\uffef\001" +
    "\002\000\040\005\ufff0\007\ufff0\010\ufff0\011\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\027\ufff0\030\ufff0\057\ufff0\001\002\000\026\007\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\027" +
    "\uffd6\030\uffd6\057\uffd6\001\002\000\026\007\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\027\uffda\030" +
    "\uffda\057\uffda\001\002\000\034\033\176\042\050\043\056" +
    "\044\052\045\047\047\057\050\053\051\055\052\054\053" +
    "\051\054\061\055\060\056\046\001\002\000\026\007\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\027" +
    "\uffd9\030\uffd9\057\uffd9\001\002\000\030\023\032\024\035" +
    "\025\036\037\040\044\033\045\030\057\037\060\045\061" +
    "\042\062\034\063\041\001\002\000\004\026\201\001\002" +
    "\000\004\033\202\001\002\000\026\007\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\027\uffde\030\uffde" +
    "\057\uffde\001\002\000\032\023\032\024\035\025\036\026" +
    "\204\037\040\044\033\045\030\057\037\060\045\061\042" +
    "\062\034\063\041\001\002\000\004\033\210\001\002\000" +
    "\004\026\206\001\002\000\004\033\207\001\002\000\026" +
    "\007\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\027\uffdb\030\uffdb\057\uffdb\001\002\000\026\007\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\027" +
    "\uffdc\030\uffdc\057\uffdc\001\002\000\030\023\032\024\035" +
    "\025\036\037\040\044\033\045\030\057\037\060\045\061" +
    "\042\062\034\063\041\001\002\000\034\026\213\042\050" +
    "\043\056\044\052\045\047\047\057\050\053\051\055\052" +
    "\054\053\051\054\061\055\060\056\046\001\002\000\022" +
    "\007\153\015\143\016\152\017\156\020\150\022\144\027" +
    "\155\057\151\001\002\000\026\007\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\216\022\uffd3\027\uffd3\030\uffd3\057" +
    "\uffd3\001\002\000\026\007\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\027\uffd5\030\uffd5\057\uffd5\001" +
    "\002\000\022\007\153\015\143\016\152\017\156\020\150" +
    "\022\144\027\155\057\151\001\002\000\026\007\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\027\uffd4" +
    "\030\uffd4\057\uffd4\001\002\000\004\030\uffe4\001\002\000" +
    "\030\023\032\024\035\025\036\037\040\044\033\045\030" +
    "\057\037\060\045\061\042\062\034\063\041\001\002\000" +
    "\004\033\225\001\002\000\004\033\224\001\002\000\026" +
    "\007\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\027\uffd8\030\uffd8\057\uffd8\001\002\000\026\007\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\027" +
    "\uffd7\030\uffd7\057\uffd7\001\002\000\034\033\227\042\050" +
    "\043\056\044\052\045\047\047\057\050\053\051\055\052" +
    "\054\053\051\054\061\055\060\056\046\001\002\000\026" +
    "\007\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\027\uffe0\030\uffe0\057\uffe0\001\002\000\020\005\uffef" +
    "\010\uffef\011\uffef\013\uffef\014\uffef\030\uffef\033\172\001" +
    "\002\000\016\005\ufff2\010\ufff2\011\ufff2\013\ufff2\014\ufff2" +
    "\030\ufff2\001\002\000\030\023\032\024\035\025\036\037" +
    "\040\044\033\045\030\057\037\060\045\061\042\062\034" +
    "\063\041\001\002\000\034\026\234\042\050\043\056\044" +
    "\052\045\047\047\057\050\053\051\055\052\054\053\051" +
    "\054\061\055\060\056\046\001\002\000\022\007\153\015" +
    "\143\016\152\017\156\020\150\022\144\027\155\057\151" +
    "\001\002\000\026\007\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\027\uffe1\030\uffe1\057\uffe1\001\002" +
    "\000\004\057\237\001\002\000\010\026\uffd2\031\077\034" +
    "\uffd2\001\002\000\006\026\uffcd\034\244\001\002\000\004" +
    "\026\242\001\002\000\004\033\243\001\002\000\026\007" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\027\uffdf\030\uffdf\057\uffdf\001\002\000\004\057\237\001" +
    "\002\000\004\026\uffce\001\002\000\010\031\126\033\ufff3" +
    "\046\025\001\002\000\024\007\ufffb\015\ufffb\016\ufffb\017" +
    "\ufffb\020\ufffb\022\ufffb\027\ufffb\030\ufffb\057\ufffb\001\002" +
    "\000\010\026\uffe6\031\251\034\uffe6\001\002\000\004\032" +
    "\252\001\002\000\006\026\uffe5\034\uffe5\001\002\000\012" +
    "\010\010\011\022\013\013\014\021\001\002\000\004\026" +
    "\uffe8\001\002\000\004\032\256\001\002\000\004\033\257" +
    "\001\002\000\040\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\022\ufff5\027\ufff5\030\ufff5\057\ufff5\001\002\000\004\025" +
    "\261\001\002\000\014\010\010\011\022\013\013\014\021" +
    "\026\uffe9\001\002\000\004\026\263\001\002\000\004\027" +
    "\264\001\002\000\036\006\020\007\ufffa\010\010\011\022" +
    "\013\013\014\021\015\ufffa\016\ufffa\017\ufffa\020\ufffa\022" +
    "\ufffa\027\ufffa\030\ufffa\057\ufffa\001\002\000\024\007\153" +
    "\015\143\016\152\017\156\020\150\022\144\027\155\030" +
    "\uffe3\057\151\001\002\000\004\030\267\001\002\000\020" +
    "\005\uffef\010\uffef\011\uffef\013\uffef\014\uffef\030\uffef\033" +
    "\172\001\002\000\016\005\ufff1\010\ufff1\011\ufff1\013\ufff1" +
    "\014\ufff1\030\ufff1\001\002\000\004\030\ufffe\001\002\000" +
    "\004\002\001\001\002\000\016\005\015\010\010\011\022" +
    "\013\013\014\021\030\ufff8\001\002\000\004\030\ufffd\001" +
    "\002\000\004\057\276\001\002\000\004\025\127\001\002" +
    "\000\004\030\ufff9\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\011\004\015" +
    "\006\013\010\010\013\016\001\001\000\002\001\001\000" +
    "\010\007\273\010\272\013\274\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\270\006\013\010\010\013" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\025\001\001" +
    "\000\010\024\030\030\042\031\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\030\030\123\031\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\030\030\122\031\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\111\024\030\030\110\031\043\001" +
    "\001\000\002\001\001\000\010\024\030\030\075\031\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\030" +
    "\030\074\031\043\001\001\000\010\024\030\030\073\031" +
    "\043\001\001\000\010\024\030\030\072\031\043\001\001" +
    "\000\010\024\030\030\071\031\043\001\001\000\010\024" +
    "\030\030\070\031\043\001\001\000\010\024\030\030\067" +
    "\031\043\001\001\000\010\024\030\030\066\031\043\001" +
    "\001\000\010\024\030\030\065\031\043\001\001\000\010" +
    "\024\030\030\064\031\043\001\001\000\010\024\030\030" +
    "\063\031\043\001\001\000\010\024\030\030\062\031\043" +
    "\001\001\000\010\024\030\030\061\031\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\030\030\106\031\043\001\001\000\012\023\101" +
    "\024\030\030\102\031\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\104\024\030" +
    "\030\102\031\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\024\030\030\113\031\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\030" +
    "\030\116\031\043\001\001\000\002\001\001\000\010\024" +
    "\030\030\120\031\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\127\001\001\000\002\001\001\000\012\013\132\014\133" +
    "\015\134\016\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\141\006" +
    "\137\013\140\001\001\000\010\005\246\006\137\013\140" +
    "\001\001\000\002\001\001\000\012\017\144\020\146\021" +
    "\153\024\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\217\020" +
    "\146\021\153\024\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\030\030\174\031" +
    "\043\001\001\000\002\001\001\000\010\005\166\006\137" +
    "\013\140\001\001\000\002\001\001\000\014\024\030\026" +
    "\157\027\160\030\161\031\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\030\026" +
    "\163\030\161\031\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\167\020\146\021" +
    "\153\024\145\001\001\000\002\001\001\000\004\012\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\024\030" +
    "\026\177\030\161\031\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\204\024\030" +
    "\030\102\031\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\030\030\211\031\043\001\001\000\002\001" +
    "\001\000\010\020\213\021\153\024\145\001\001\000\004" +
    "\022\214\001\001\000\002\001\001\000\010\020\216\021" +
    "\153\024\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\030\030\225\031\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\230\001" +
    "\001\000\002\001\001\000\010\024\030\030\232\031\043" +
    "\001\001\000\002\001\001\000\010\020\234\021\153\024" +
    "\145\001\001\000\002\001\001\000\006\024\237\025\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\237" +
    "\025\244\001\001\000\002\001\001\000\004\011\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\132\014\253\016\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\132\014" +
    "\133\015\261\016\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\264\006\137\013\140\001\001\000" +
    "\012\017\265\020\146\021\153\024\145\001\001\000\002" +
    "\001\001\000\004\012\267\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\276\010\272" +
    "\013\274\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= CLASS ID LCURLYBRACKET memberdecls RCURLYBRACKET 
            {
              Program RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Memberdecls ms = (Memberdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program(id, ms); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // memberdecls ::= classmembers 
            {
              Memberdecls RESULT =null;
		int cmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassMembers cms = (ClassMembers)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Memberdecls(cms);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classmembers ::= fielddecl classmembers 
            {
              ClassMembers RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl fd = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassMembers cms = (ClassMembers)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ClassMembers(fd, cms);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classmembers",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classmembers ::= methoddecl methoddecls 
            {
              ClassMembers RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Methoddecl md = (Methoddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls mds = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ClassMembers(md, mds);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classmembers",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classmembers ::= 
            {
              ClassMembers RESULT =null;
		 RESULT = new ClassMembers();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classmembers",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fielddecls ::= fielddecl fielddecls 
            {
              Fielddecls RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl f = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddecls fs = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Fielddecls(f,fs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fielddecls ::= 
            {
              Fielddecls RESULT =null;
		 RESULT = new Fielddecls(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // methoddecls ::= methoddecl methoddecls 
            {
              Methoddecls RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Methoddecl m = (Methoddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int msright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls ms = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecls(m,ms); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecls",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // methoddecls ::= 
            {
              Methoddecls RESULT =null;
		 RESULT = new Methoddecls(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecls",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fielddecl ::= FINAL type ID optionalexpr SEMICOLON 
            {
              Fielddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr opex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Fielddecl(true, t, id, opex); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // fielddecl ::= type ID optionalexpr SEMICOLON 
            {
              Fielddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr opex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Fielddecl(false, t, id, opex); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fielddecl ::= type ID LBRACKET INTLITERAL RBRACKET  SEMICOLON 
            {
              Fielddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		int len = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Fielddecl(t, id, len); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // optionalexpr ::= ASSIGNBY expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // optionalexpr ::= 
            {
              Expr RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // methoddecl ::= type ID LPARENTHESIS argdecls RPARENTHESIS LCURLYBRACKET fielddecls stmts RCURLYBRACKET optionalsemi 
            {
              Methoddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Argdecls as = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls fs = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts sts = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opsemileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opsemiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean opsemi = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecl(t, id, as, fs, sts, opsemi); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methoddecl ::= VOID ID LPARENTHESIS argdecls RPARENTHESIS LCURLYBRACKET fielddecls stmts RCURLYBRACKET optionalsemi 
            {
              Methoddecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Argdecls as = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls fs = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts sts = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opsemileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opsemiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean opsemi = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecl("void", id, as, fs, sts, opsemi); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // optionalsemi ::= SEMICOLON 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // optionalsemi ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= INT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= FLOAT 
            {
              String RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= BOOL 
            {
              String RESULT =null;
		 RESULT = "bool"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= CHAR 
            {
              String RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // argdecls ::= argdecllist 
            {
              Argdecls RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgdeclList alst = (ArgdeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Argdecls(alst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // argdecls ::= 
            {
              Argdecls RESULT =null;
		 RESULT = new Argdecls(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // argdecllist ::= argdecl COMMA argdecllist 
            {
              ArgdeclList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argdecl a = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgdeclList alst = (ArgdeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new ArgdeclList(a,alst) ;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecllist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // argdecllist ::= argdecl 
            {
              ArgdeclList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argdecl a = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new ArgdeclList(a) ;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecllist",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // argdecl ::= type ID 
            {
              Argdecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				RESULT = new Argdecl(t, id, false); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // argdecl ::= type ID LBRACKET RBRACKET  
            {
              Argdecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
				RESULT = new Argdecl(t, id, true); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmts ::= stmt stmts 
            {
              Stmts RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmts sts = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Stmts(st,sts);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmts ::= 
            {
              Stmts RESULT =null;
		 
			RESULT = new Stmts(); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= ifStmt 
            {
              Stmt RESULT =null;
		int ifstmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifstmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt ifstmt = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ifstmt;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= WHILE LPARENTHESIS expr RPARENTHESIS stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(e, st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= name ASSIGNBY expr SEMICOLON 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Stmt(n, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= READ LPARENTHESIS readlist RPARENTHESIS SEMICOLON 
            {
              Stmt RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Readlist rl = (Readlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(rl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= PRINT LPARENTHESIS printlist RPARENTHESIS SEMICOLON 
            {
              Stmt RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Printlist pl = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= PRINTLINE LPARENTHESIS printlinelist RPARENTHESIS SEMICOLON 
            {
              Stmt RESULT =null;
		int pllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Printlinelist pll = (Printlinelist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(pll); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= ID LPARENTHESIS RPARENTHESIS SEMICOLON 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Stmt(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= ID LPARENTHESIS args RPARENTHESIS SEMICOLON 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(id, args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= RETURN SEMICOLON 
            {
              Stmt RESULT =null;
		 RESULT = new Stmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= RETURN expr SEMICOLON 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Stmt(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= name INCREMENTBY SEMICOLON 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(n, "++"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= name DECREMENTBY SEMICOLON 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Stmt(n, "--"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= LCURLYBRACKET fielddecls stmts RCURLYBRACKET optionalsemi 
            {
              Stmt RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls fs = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts sts = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opsemileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opsemiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean opsemi = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(fs, sts, opsemi); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ifStmt ::= IF LPARENTHESIS expr RPARENTHESIS stmt ifEnd 
            {
              Stmt RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt st1 = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt st2 = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(ex, st1, st2);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ifEnd ::= ELSE stmt 
            {
              Stmt RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifEnd",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ifEnd ::= 
            {
              Stmt RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifEnd",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // name ::= ID 
            {
              Name RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Name(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // name ::= ID LBRACKET expr RBRACKET  
            {
              Name RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Name(id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // args ::= expr COMMA args 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Args(e,args);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // args ::= expr 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Args(e);		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // readlist ::= name COMMA readlist 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Readlist rl = (Readlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			    RESULT = new Readlist(n,rl);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // readlist ::= name 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Readlist(n);		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // printlist ::= expr COMMA printlist 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printlist pl = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new Printlist(e,pl);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // printlist ::= expr 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new Printlist(e);		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // printlinelist ::= printlist 
            {
              Printlinelist RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printlist pl = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						RESULT = new Printlinelist(pl); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // printlinelist ::= 
            {
              Printlinelist RESULT =null;
		 
						RESULT = new Printlinelist(); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= name 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(n);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= ID LPARENTHESIS RPARENTHESIS 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Expr(id, (Args) null);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= ID LPARENTHESIS args RPARENTHESIS 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(id, a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= INTLITERAL 
            {
              Expr RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int il = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(il);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= CHARLITERAL 
            {
              Expr RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(cl, "char");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= STRINGLITERAL 
            {
              Expr RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(sl, "str");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= FLOATLITERAL 
            {
              Expr RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		float fl = (float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(fl);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new Expr(true);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new Expr(false);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= LPARENTHESIS expr RPARENTHESIS 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(e, "PAREN");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= TILDENOTE expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(e, "~");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= SUBTRACTBY expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(e, "-");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= ADDBY expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(e, "+");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= LPARENTHESIS type RPARENTHESIS expr 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(t, e);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= binaryOp 
            {
              Expr RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinaryOp bo = (BinaryOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(bo);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= LPARENTHESIS expr QUESTIONMARK expr COLON expr RPARENTHESIS 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(e1, e2, e3);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binaryOp ::= expr MULTIPLYBY expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp(e1, e2, "*");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // binaryOp ::= expr DIVIDEBY expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp(e1, e2, "/");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binaryOp ::= expr ADDBY expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp(e1, e2, "+");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // binaryOp ::= expr SUBTRACTBY expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp(e1, e2, "-");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // binaryOp ::= expr LESSTHANSIGN expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp(e1, e2, "<");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // binaryOp ::= expr GREATERTHANSIGN expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp(e1, e2, ">");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // binaryOp ::= expr LESSTHANEQUALTOSIGN expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp(e1, e2, "<=");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binaryOp ::= expr GREATERTHANEQUALTOSIGN expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp(e1, e2, ">=");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // binaryOp ::= expr DOUBLEEQUALTOSIGN expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp(e1, e2, "==");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // binaryOp ::= expr LOZENGESIGN expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp(e1, e2, "<>");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // binaryOp ::= expr ORSIGN expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp(e1, e2, "||");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // binaryOp ::= expr ANDSIGN expr 
            {
              BinaryOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryOp(e1, e2, "&&");  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
